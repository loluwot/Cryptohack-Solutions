import math
from Crypto.Util.number import *
import random
from sympy.ntheory.residue_ntheory import *
from pwn import *
import json
#from decimal import *
#getcontext().prec = 100000
# flag = 'crypto{???????????????????????????????????}'
# print(len(flag))
def legendre(a, p):
    # if a == 2:
        # return (-1)**((p**2-1)//8)
    return pow(a, (p-1)//2, p)


N = 56135841374488684373258694423292882709478511628224823806418810596720294684253418942704418179091997825551647866062286502441190115027708222460662070779175994701788428003909010382045613207284532791741873673703066633119446610400693458529100429608337219231960657953091738271259191554117313396642763210860060639141073846574854063639566514714132858435468712515314075072939175199679898398182825994936320483610198366472677612791756619011108922142762239138617449089169337289850195216113264566855267751924532728815955224322883877527042705441652709430700299472818705784229370198468215837020914928178388248878021890768324401897370624585349884198333555859109919450686780542004499282760223378846810870449633398616669951505955844529109916358388422428604135236531474213891506793466625402941248015834590154103947822771207939622459156386080305634677080506350249632630514863938445888806223951124355094468682539815309458151531117637927820629042605402188751144912274644498695897277
phi =  56135841374488684373258694423292882709478511628224823806413974550086974518248002462797814062141189227167574137989180030483816863197632033192968896065500768938801786598807509315219962138010136188406833851300860971268861927441791178122071599752664078796430411769850033154303492519678490546174370674967628006608839214466433919286766123091889446305984360469651656535210598491300297553925477655348454404698555949086705347702081589881912691966015661120478477658546912972227759596328813124229023736041312940514530600515818452405627696302497023443025538858283667214796256764291946208723335591637425256171690058543567732003198060253836008672492455078544449442472712365127628629283773126365094146350156810594082935996208856669620333251443999075757034938614748482073575647862178964169142739719302502938881912008485968506720505975584527371889195388169228947911184166286132699532715673539451471005969465570624431658644322366653686517908000327238974943675848531974674382848
#carm = 1713129924758565807289388867898342367842972156623072015576598344424040970405517653283624696720617347020494816222814331984979762670826172887969021486373924833337456866418686197363890446106266363171595271340968657570460874250542943668276110832295656701551221062312317906320297012929641435124950276946033569537623267043043027321983829440060102731505870375660756119848956252786263963437667164775038281393388548250937052847353564144345480101501942783217726979325772490607536608774683017707184562257120145889725665298944654919605337411575226545502488368477895117639045921761839178733011950428388221929067689774889151977636659553644897725600966036332533247145773692783435932290154209178622257884221094073305753661993678487232065834089477510856843107257530166078905506831731535771763389273660354703945370849868346206870132628649430156612829449101844145138891118355900045762106801560652205536070845506916028798176401439412038773129516611549040983388545182250203686
g = 986762276114520220801525811758560961667498483061127810099097

t = phi
while phi % 2 == 0:
    t //= 2
factors = set()
for b in range(2, 200):
    #print(b)
    common = GCD(pow(b, t, N) - 1, N)
    if not common == 1:
        factors.add(common)
        

print(len(factors))
ffacs = set()
m = 1
for f in factors:
    for ff in factors:
        if not GCD(f, ff) == 1:
            ffacs.add(GCD(f, ff))

#print(facs)
facs = set()
for f in facs:
    if isPrime(f):
        facs.add(f)
    #m *= f//GCD(m, f)
    
print(facs) #facs = [181322805383940703007265906643044843190489788732785182321487, 1257159212779420306219169217946797219783415728365988507869027, 962196273251325220586440176597115791597983910091568285193479, 1801752121380249789355959738781230662094667376359625751791543, 1288911769345182280978162047973381722380823635671566593519807, 1676976510651768067412350964868910593417947379184949447823407, 2127656865180928955386281095823023620786349152280473160223119, 91986886828478213472802814993555054129006913989537753096123, 804417174623672415450557634612568265192863476713582219744267, 2957688520542834742528816032405856023269135282074862187456419, 760363004025578077604626764282706830072847466932877419051319, 16567394141556324107484965437698357115399742102575293290747, 1779340212039893773391726001368709776860306288741559089532759, 2035960746196047990457969452572805869038616040671770568205203, 2580048403805885869520594654954918201506476199364198744646143, 1198659778546842874656876799650682636702329592515612873898067]
facs = list(facs)
val = facs[1] #factor selected such that legendre (generator, factor) == 1
flag = ''
for i in range(43):
    bits = ''
    for ii in range(8):
        allones = True
        while True:
            try:
                r = remote('socket.cryptohack.org', 13398)
                r.recvline()
                for j in range(10):
                    req = {"option":"get_bit", "i":i*8 + ii}
                    r.sendline(json.dumps(req))
                    resp = json.loads(r.recvline())
                    resp = int(resp["bit"], 16)
                    if not legendre_symbol(resp, val) == 1:
                        allones = False
                        break
                break
            except KeyboardInterrupt:
                break
            except:
                continue
        bits += str(int(allones))
    #print(flag)
    flag += chr(int(bits[::-1], 2))
    print(flag)
    